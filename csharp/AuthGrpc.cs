// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Etg.Auth {
  public static class Auth
  {
    static readonly string __ServiceName = "etg.auth.Auth";

    static readonly Marshaller<global::Etg.Auth.GetCaptchaImageRequest> __Marshaller_GetCaptchaImageRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etg.Auth.GetCaptchaImageRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Etg.Auth.GetCaptchaImageResponse> __Marshaller_GetCaptchaImageResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etg.Auth.GetCaptchaImageResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Etg.Auth.SendTokenToContactRequest> __Marshaller_SendTokenToContactRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etg.Auth.SendTokenToContactRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Etg.Auth.SendTokenToContactResponse> __Marshaller_SendTokenToContactResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etg.Auth.SendTokenToContactResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Etg.Auth.LoginRequest> __Marshaller_LoginRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etg.Auth.LoginRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Etg.Auth.LoginResponse> __Marshaller_LoginResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etg.Auth.LoginResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Etg.Auth.LogoutRequest> __Marshaller_LogoutRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etg.Auth.LogoutRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Etg.Auth.LogoutResponse> __Marshaller_LogoutResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etg.Auth.LogoutResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Etg.Auth.RegisterWithCompanyIdRequest> __Marshaller_RegisterWithCompanyIdRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etg.Auth.RegisterWithCompanyIdRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Etg.Auth.RegisterWithCompanyIdResponse> __Marshaller_RegisterWithCompanyIdResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etg.Auth.RegisterWithCompanyIdResponse.Parser.ParseFrom);

    static readonly Method<global::Etg.Auth.GetCaptchaImageRequest, global::Etg.Auth.GetCaptchaImageResponse> __Method_GetCaptchaImage = new Method<global::Etg.Auth.GetCaptchaImageRequest, global::Etg.Auth.GetCaptchaImageResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetCaptchaImage",
        __Marshaller_GetCaptchaImageRequest,
        __Marshaller_GetCaptchaImageResponse);

    static readonly Method<global::Etg.Auth.SendTokenToContactRequest, global::Etg.Auth.SendTokenToContactResponse> __Method_SendTokenToContact = new Method<global::Etg.Auth.SendTokenToContactRequest, global::Etg.Auth.SendTokenToContactResponse>(
        MethodType.Unary,
        __ServiceName,
        "SendTokenToContact",
        __Marshaller_SendTokenToContactRequest,
        __Marshaller_SendTokenToContactResponse);

    static readonly Method<global::Etg.Auth.LoginRequest, global::Etg.Auth.LoginResponse> __Method_Login = new Method<global::Etg.Auth.LoginRequest, global::Etg.Auth.LoginResponse>(
        MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_LoginRequest,
        __Marshaller_LoginResponse);

    static readonly Method<global::Etg.Auth.LogoutRequest, global::Etg.Auth.LogoutResponse> __Method_Logout = new Method<global::Etg.Auth.LogoutRequest, global::Etg.Auth.LogoutResponse>(
        MethodType.Unary,
        __ServiceName,
        "Logout",
        __Marshaller_LogoutRequest,
        __Marshaller_LogoutResponse);

    static readonly Method<global::Etg.Auth.RegisterWithCompanyIdRequest, global::Etg.Auth.RegisterWithCompanyIdResponse> __Method_RegisterWithCompanyId = new Method<global::Etg.Auth.RegisterWithCompanyIdRequest, global::Etg.Auth.RegisterWithCompanyIdResponse>(
        MethodType.Unary,
        __ServiceName,
        "RegisterWithCompanyId",
        __Marshaller_RegisterWithCompanyIdRequest,
        __Marshaller_RegisterWithCompanyIdResponse);

    static readonly Method<global::Etg.Auth.RegisterWithCompanyIdRequest, global::Etg.Auth.RegisterWithCompanyIdResponse> __Method_ResetPasswordWithCompanyId = new Method<global::Etg.Auth.RegisterWithCompanyIdRequest, global::Etg.Auth.RegisterWithCompanyIdResponse>(
        MethodType.Unary,
        __ServiceName,
        "ResetPasswordWithCompanyId",
        __Marshaller_RegisterWithCompanyIdRequest,
        __Marshaller_RegisterWithCompanyIdResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Etg.Auth.AuthReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Auth</summary>
    public abstract class AuthBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Etg.Auth.GetCaptchaImageResponse> GetCaptchaImage(global::Etg.Auth.GetCaptchaImageRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Etg.Auth.SendTokenToContactResponse> SendTokenToContact(global::Etg.Auth.SendTokenToContactRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Etg.Auth.LoginResponse> Login(global::Etg.Auth.LoginRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Etg.Auth.LogoutResponse> Logout(global::Etg.Auth.LogoutRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Etg.Auth.RegisterWithCompanyIdResponse> RegisterWithCompanyId(global::Etg.Auth.RegisterWithCompanyIdRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Etg.Auth.RegisterWithCompanyIdResponse> ResetPasswordWithCompanyId(global::Etg.Auth.RegisterWithCompanyIdRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Auth</summary>
    public class AuthClient : ClientBase<AuthClient>
    {
      /// <summary>Creates a new client for Auth</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AuthClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Auth that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AuthClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AuthClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AuthClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Etg.Auth.GetCaptchaImageResponse GetCaptchaImage(global::Etg.Auth.GetCaptchaImageRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCaptchaImage(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Etg.Auth.GetCaptchaImageResponse GetCaptchaImage(global::Etg.Auth.GetCaptchaImageRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCaptchaImage, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.GetCaptchaImageResponse> GetCaptchaImageAsync(global::Etg.Auth.GetCaptchaImageRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCaptchaImageAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.GetCaptchaImageResponse> GetCaptchaImageAsync(global::Etg.Auth.GetCaptchaImageRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCaptchaImage, null, options, request);
      }
      public virtual global::Etg.Auth.SendTokenToContactResponse SendTokenToContact(global::Etg.Auth.SendTokenToContactRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendTokenToContact(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Etg.Auth.SendTokenToContactResponse SendTokenToContact(global::Etg.Auth.SendTokenToContactRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendTokenToContact, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.SendTokenToContactResponse> SendTokenToContactAsync(global::Etg.Auth.SendTokenToContactRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendTokenToContactAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.SendTokenToContactResponse> SendTokenToContactAsync(global::Etg.Auth.SendTokenToContactRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendTokenToContact, null, options, request);
      }
      public virtual global::Etg.Auth.LoginResponse Login(global::Etg.Auth.LoginRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Login(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Etg.Auth.LoginResponse Login(global::Etg.Auth.LoginRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.LoginResponse> LoginAsync(global::Etg.Auth.LoginRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoginAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.LoginResponse> LoginAsync(global::Etg.Auth.LoginRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      public virtual global::Etg.Auth.LogoutResponse Logout(global::Etg.Auth.LogoutRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Logout(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Etg.Auth.LogoutResponse Logout(global::Etg.Auth.LogoutRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Logout, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.LogoutResponse> LogoutAsync(global::Etg.Auth.LogoutRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogoutAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.LogoutResponse> LogoutAsync(global::Etg.Auth.LogoutRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Logout, null, options, request);
      }
      public virtual global::Etg.Auth.RegisterWithCompanyIdResponse RegisterWithCompanyId(global::Etg.Auth.RegisterWithCompanyIdRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RegisterWithCompanyId(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Etg.Auth.RegisterWithCompanyIdResponse RegisterWithCompanyId(global::Etg.Auth.RegisterWithCompanyIdRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterWithCompanyId, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.RegisterWithCompanyIdResponse> RegisterWithCompanyIdAsync(global::Etg.Auth.RegisterWithCompanyIdRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RegisterWithCompanyIdAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.RegisterWithCompanyIdResponse> RegisterWithCompanyIdAsync(global::Etg.Auth.RegisterWithCompanyIdRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterWithCompanyId, null, options, request);
      }
      public virtual global::Etg.Auth.RegisterWithCompanyIdResponse ResetPasswordWithCompanyId(global::Etg.Auth.RegisterWithCompanyIdRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ResetPasswordWithCompanyId(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Etg.Auth.RegisterWithCompanyIdResponse ResetPasswordWithCompanyId(global::Etg.Auth.RegisterWithCompanyIdRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetPasswordWithCompanyId, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.RegisterWithCompanyIdResponse> ResetPasswordWithCompanyIdAsync(global::Etg.Auth.RegisterWithCompanyIdRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ResetPasswordWithCompanyIdAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Etg.Auth.RegisterWithCompanyIdResponse> ResetPasswordWithCompanyIdAsync(global::Etg.Auth.RegisterWithCompanyIdRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetPasswordWithCompanyId, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AuthClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AuthClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(AuthBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCaptchaImage, serviceImpl.GetCaptchaImage)
          .AddMethod(__Method_SendTokenToContact, serviceImpl.SendTokenToContact)
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_Logout, serviceImpl.Logout)
          .AddMethod(__Method_RegisterWithCompanyId, serviceImpl.RegisterWithCompanyId)
          .AddMethod(__Method_ResetPasswordWithCompanyId, serviceImpl.ResetPasswordWithCompanyId).Build();
    }

  }
}
#endregion
