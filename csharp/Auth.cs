// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Etg.Auth {

  /// <summary>Holder for reflection information generated from auth.proto</summary>
  public static partial class AuthReflection {

    #region Descriptor
    /// <summary>File descriptor for auth.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuthReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgphdXRoLnByb3RvEghldGcuYXV0aBoNcHJvZmlsZS5wcm90bxofZ29vZ2xl",
            "L3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byIYChZHZXRDYXB0Y2hhSW1hZ2VS",
            "ZXF1ZXN0IkEKF0dldENhcHRjaGFJbWFnZVJlc3BvbnNlEhIKCmNhcHRjaGFf",
            "aWQYASABKAkSEgoKaW1hZ2VfZGF0YRgCIAEoDCJUChlTZW5kVG9rZW5Ub0Nv",
            "bnRhY3RSZXF1ZXN0EhIKCmNvbXBhbnlfaWQYASABKAkSEgoKY2FwdGNoYV9p",
            "ZBgCIAEoCRIPCgdjYXB0Y2hhGAMgASgJImgKGlNlbmRUb2tlblRvQ29udGFj",
            "dFJlc3BvbnNlEhUKDWlzX3N1Y2Nlc3NmdWwYASABKAgSDgoGbW9iaWxlGAIg",
            "ASgJEg8KB21lc3NhZ2UYAyABKAkSEgoKY2FwdGNoYV9pZBgEIAEoCSKqAQoM",
            "TG9naW5SZXF1ZXN0EicKCmxvZ2luX3R5cGUYASABKA4yEy5ldGcuYXV0aC5M",
            "b2dpblR5cGUSDQoFZW1haWwYAiABKAkSFQoNaGFzaGVkX3Bhc3N3ZBgDIAEo",
            "CRISCgpjb21wYW55X2lkGAQgASgJEhIKCmNhcHRjaGFfaWQYBSABKAkSDQoF",
            "dG9rZW4YBiABKAkSFAoMYWNjZXNzX3Rva2VuGAcgASgJItwBCg1Mb2dpblJl",
            "c3BvbnNlEhUKDWlzX3N1Y2Nlc3NmdWwYASABKAgSDwoHbWVzc2FnZRgCIAEo",
            "CRIUCgxhY2Nlc3NfdG9rZW4YAyABKAkSNwoTdGltZXN0YW1wX2V4cGlyZV9h",
            "dBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASJgoEdXNlchgF",
            "IAEoCzIYLmV0Zy5wcm9maWxlLlVzZXJQcm9maWxlEiwKB2NvbXBhbnkYBiAB",
            "KAsyGy5ldGcucHJvZmlsZS5Db21wYW55UHJvZmlsZSIlCg1Mb2dvdXRSZXF1",
            "ZXN0EhQKDGFjY2Vzc190b2tlbhgBIAEoCSInCg5Mb2dvdXRSZXNwb25zZRIV",
            "Cg1pc19zdWNjZXNzZnVsGAEgASgIInsKHFJlZ2lzdGVyV2l0aENvbXBhbnlJ",
            "ZFJlcXVlc3QSEgoKY29tcGFueV9pZBgBIAEoCRISCgpjYXB0Y2hhX2lkGAIg",
            "ASgJEg0KBXRva2VuGAMgASgJEhUKDWhhc2hlZF9wYXNzd2QYBCABKAkSDQoF",
            "ZW1haWwYBSABKAkiXQodUmVnaXN0ZXJXaXRoQ29tcGFueUlkUmVzcG9uc2US",
            "FQoNaXNfc3VjY2Vzc2Z1bBgBIAEoCBIPCgdtZXNzYWdlGAIgASgJEhQKDGFj",
            "Y2Vzc190b2tlbhgDIAEoCSJxCiFSZXNldFBhc3N3b3JkV2l0aENvbXBhbnlJ",
            "ZFJlcXVlc3QSEgoKY29tcGFueV9pZBgBIAEoCRISCgpjYXB0Y2hhX2lkGAIg",
            "ASgJEg0KBXRva2VuGAMgASgJEhUKDWhhc2hlZF9wYXNzd2QYBCABKAkiTAoi",
            "UmVzZXRQYXNzd29yZFdpdGhDb21wYW55SWRSZXNwb25zZRIVCg1pc19zdWNj",
            "ZXNzZnVsGAEgASgIEg8KB21lc3NhZ2UYAiABKAkqJgoJTG9naW5UeXBlEgkK",
            "BUVNQUlMEAASDgoKQ09NUEFOWV9JRBABMpsECgRBdXRoElgKD0dldENhcHRj",
            "aGFJbWFnZRIgLmV0Zy5hdXRoLkdldENhcHRjaGFJbWFnZVJlcXVlc3QaIS5l",
            "dGcuYXV0aC5HZXRDYXB0Y2hhSW1hZ2VSZXNwb25zZSIAEmEKElNlbmRUb2tl",
            "blRvQ29udGFjdBIjLmV0Zy5hdXRoLlNlbmRUb2tlblRvQ29udGFjdFJlcXVl",
            "c3QaJC5ldGcuYXV0aC5TZW5kVG9rZW5Ub0NvbnRhY3RSZXNwb25zZSIAEjoK",
            "BUxvZ2luEhYuZXRnLmF1dGguTG9naW5SZXF1ZXN0GhcuZXRnLmF1dGguTG9n",
            "aW5SZXNwb25zZSIAEj0KBkxvZ291dBIXLmV0Zy5hdXRoLkxvZ291dFJlcXVl",
            "c3QaGC5ldGcuYXV0aC5Mb2dvdXRSZXNwb25zZSIAEmoKFVJlZ2lzdGVyV2l0",
            "aENvbXBhbnlJZBImLmV0Zy5hdXRoLlJlZ2lzdGVyV2l0aENvbXBhbnlJZFJl",
            "cXVlc3QaJy5ldGcuYXV0aC5SZWdpc3RlcldpdGhDb21wYW55SWRSZXNwb25z",
            "ZSIAEm8KGlJlc2V0UGFzc3dvcmRXaXRoQ29tcGFueUlkEiYuZXRnLmF1dGgu",
            "UmVnaXN0ZXJXaXRoQ29tcGFueUlkUmVxdWVzdBonLmV0Zy5hdXRoLlJlZ2lz",
            "dGVyV2l0aENvbXBhbnlJZFJlc3BvbnNlIgBCJwoIZXRnLmF1dGhCCEV0Z1By",
            "b3RvUAGiAgNFVEeqAghFdGcuQXV0aFAAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Etg.Profile.ProfileReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Etg.Auth.LoginType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.GetCaptchaImageRequest), global::Etg.Auth.GetCaptchaImageRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.GetCaptchaImageResponse), global::Etg.Auth.GetCaptchaImageResponse.Parser, new[]{ "CaptchaId", "ImageData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.SendTokenToContactRequest), global::Etg.Auth.SendTokenToContactRequest.Parser, new[]{ "CompanyId", "CaptchaId", "Captcha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.SendTokenToContactResponse), global::Etg.Auth.SendTokenToContactResponse.Parser, new[]{ "IsSuccessful", "Mobile", "Message", "CaptchaId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.LoginRequest), global::Etg.Auth.LoginRequest.Parser, new[]{ "LoginType", "Email", "HashedPasswd", "CompanyId", "CaptchaId", "Token", "AccessToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.LoginResponse), global::Etg.Auth.LoginResponse.Parser, new[]{ "IsSuccessful", "Message", "AccessToken", "TimestampExpireAt", "User", "Company" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.LogoutRequest), global::Etg.Auth.LogoutRequest.Parser, new[]{ "AccessToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.LogoutResponse), global::Etg.Auth.LogoutResponse.Parser, new[]{ "IsSuccessful" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.RegisterWithCompanyIdRequest), global::Etg.Auth.RegisterWithCompanyIdRequest.Parser, new[]{ "CompanyId", "CaptchaId", "Token", "HashedPasswd", "Email" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.RegisterWithCompanyIdResponse), global::Etg.Auth.RegisterWithCompanyIdResponse.Parser, new[]{ "IsSuccessful", "Message", "AccessToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.ResetPasswordWithCompanyIdRequest), global::Etg.Auth.ResetPasswordWithCompanyIdRequest.Parser, new[]{ "CompanyId", "CaptchaId", "Token", "HashedPasswd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etg.Auth.ResetPasswordWithCompanyIdResponse), global::Etg.Auth.ResetPasswordWithCompanyIdResponse.Parser, new[]{ "IsSuccessful", "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LoginType {
    [pbr::OriginalName("EMAIL")] Email = 0,
    [pbr::OriginalName("COMPANY_ID")] CompanyId = 1,
  }

  #endregion

  #region Messages
  public sealed partial class GetCaptchaImageRequest : pb::IMessage<GetCaptchaImageRequest> {
    private static readonly pb::MessageParser<GetCaptchaImageRequest> _parser = new pb::MessageParser<GetCaptchaImageRequest>(() => new GetCaptchaImageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCaptchaImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCaptchaImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCaptchaImageRequest(GetCaptchaImageRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCaptchaImageRequest Clone() {
      return new GetCaptchaImageRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCaptchaImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCaptchaImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCaptchaImageRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetCaptchaImageResponse : pb::IMessage<GetCaptchaImageResponse> {
    private static readonly pb::MessageParser<GetCaptchaImageResponse> _parser = new pb::MessageParser<GetCaptchaImageResponse>(() => new GetCaptchaImageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCaptchaImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCaptchaImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCaptchaImageResponse(GetCaptchaImageResponse other) : this() {
      captchaId_ = other.captchaId_;
      imageData_ = other.imageData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCaptchaImageResponse Clone() {
      return new GetCaptchaImageResponse(this);
    }

    /// <summary>Field number for the "captcha_id" field.</summary>
    public const int CaptchaIdFieldNumber = 1;
    private string captchaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CaptchaId {
      get { return captchaId_; }
      set {
        captchaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_data" field.</summary>
    public const int ImageDataFieldNumber = 2;
    private pb::ByteString imageData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ImageData {
      get { return imageData_; }
      set {
        imageData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCaptchaImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCaptchaImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CaptchaId != other.CaptchaId) return false;
      if (ImageData != other.ImageData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CaptchaId.Length != 0) hash ^= CaptchaId.GetHashCode();
      if (ImageData.Length != 0) hash ^= ImageData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CaptchaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CaptchaId);
      }
      if (ImageData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ImageData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CaptchaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CaptchaId);
      }
      if (ImageData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ImageData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCaptchaImageResponse other) {
      if (other == null) {
        return;
      }
      if (other.CaptchaId.Length != 0) {
        CaptchaId = other.CaptchaId;
      }
      if (other.ImageData.Length != 0) {
        ImageData = other.ImageData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CaptchaId = input.ReadString();
            break;
          }
          case 18: {
            ImageData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendTokenToContactRequest : pb::IMessage<SendTokenToContactRequest> {
    private static readonly pb::MessageParser<SendTokenToContactRequest> _parser = new pb::MessageParser<SendTokenToContactRequest>(() => new SendTokenToContactRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendTokenToContactRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTokenToContactRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTokenToContactRequest(SendTokenToContactRequest other) : this() {
      companyId_ = other.companyId_;
      captchaId_ = other.captchaId_;
      captcha_ = other.captcha_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTokenToContactRequest Clone() {
      return new SendTokenToContactRequest(this);
    }

    /// <summary>Field number for the "company_id" field.</summary>
    public const int CompanyIdFieldNumber = 1;
    private string companyId_ = "";
    /// <summary>
    ///  trade_co or social_credit_code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompanyId {
      get { return companyId_; }
      set {
        companyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "captcha_id" field.</summary>
    public const int CaptchaIdFieldNumber = 2;
    private string captchaId_ = "";
    /// <summary>
    ///  captcha image id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CaptchaId {
      get { return captchaId_; }
      set {
        captchaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "captcha" field.</summary>
    public const int CaptchaFieldNumber = 3;
    private string captcha_ = "";
    /// <summary>
    ///  captcha image 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Captcha {
      get { return captcha_; }
      set {
        captcha_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendTokenToContactRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendTokenToContactRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompanyId != other.CompanyId) return false;
      if (CaptchaId != other.CaptchaId) return false;
      if (Captcha != other.Captcha) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompanyId.Length != 0) hash ^= CompanyId.GetHashCode();
      if (CaptchaId.Length != 0) hash ^= CaptchaId.GetHashCode();
      if (Captcha.Length != 0) hash ^= Captcha.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompanyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CompanyId);
      }
      if (CaptchaId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CaptchaId);
      }
      if (Captcha.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Captcha);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompanyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompanyId);
      }
      if (CaptchaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CaptchaId);
      }
      if (Captcha.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Captcha);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendTokenToContactRequest other) {
      if (other == null) {
        return;
      }
      if (other.CompanyId.Length != 0) {
        CompanyId = other.CompanyId;
      }
      if (other.CaptchaId.Length != 0) {
        CaptchaId = other.CaptchaId;
      }
      if (other.Captcha.Length != 0) {
        Captcha = other.Captcha;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CompanyId = input.ReadString();
            break;
          }
          case 18: {
            CaptchaId = input.ReadString();
            break;
          }
          case 26: {
            Captcha = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendTokenToContactResponse : pb::IMessage<SendTokenToContactResponse> {
    private static readonly pb::MessageParser<SendTokenToContactResponse> _parser = new pb::MessageParser<SendTokenToContactResponse>(() => new SendTokenToContactResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendTokenToContactResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTokenToContactResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTokenToContactResponse(SendTokenToContactResponse other) : this() {
      isSuccessful_ = other.isSuccessful_;
      mobile_ = other.mobile_;
      message_ = other.message_;
      captchaId_ = other.captchaId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTokenToContactResponse Clone() {
      return new SendTokenToContactResponse(this);
    }

    /// <summary>Field number for the "is_successful" field.</summary>
    public const int IsSuccessfulFieldNumber = 1;
    private bool isSuccessful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccessful {
      get { return isSuccessful_; }
      set {
        isSuccessful_ = value;
      }
    }

    /// <summary>Field number for the "mobile" field.</summary>
    public const int MobileFieldNumber = 2;
    private string mobile_ = "";
    /// <summary>
    ///  which mobile has sent to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mobile {
      get { return mobile_; }
      set {
        mobile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "captcha_id" field.</summary>
    public const int CaptchaIdFieldNumber = 4;
    private string captchaId_ = "";
    /// <summary>
    ///  captcha id for token sent to contact's mobile
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CaptchaId {
      get { return captchaId_; }
      set {
        captchaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendTokenToContactResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendTokenToContactResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSuccessful != other.IsSuccessful) return false;
      if (Mobile != other.Mobile) return false;
      if (Message != other.Message) return false;
      if (CaptchaId != other.CaptchaId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSuccessful != false) hash ^= IsSuccessful.GetHashCode();
      if (Mobile.Length != 0) hash ^= Mobile.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (CaptchaId.Length != 0) hash ^= CaptchaId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSuccessful != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSuccessful);
      }
      if (Mobile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mobile);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (CaptchaId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CaptchaId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSuccessful != false) {
        size += 1 + 1;
      }
      if (Mobile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mobile);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (CaptchaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CaptchaId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendTokenToContactResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsSuccessful != false) {
        IsSuccessful = other.IsSuccessful;
      }
      if (other.Mobile.Length != 0) {
        Mobile = other.Mobile;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.CaptchaId.Length != 0) {
        CaptchaId = other.CaptchaId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSuccessful = input.ReadBool();
            break;
          }
          case 18: {
            Mobile = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            CaptchaId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      loginType_ = other.loginType_;
      email_ = other.email_;
      hashedPasswd_ = other.hashedPasswd_;
      companyId_ = other.companyId_;
      captchaId_ = other.captchaId_;
      token_ = other.token_;
      accessToken_ = other.accessToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "login_type" field.</summary>
    public const int LoginTypeFieldNumber = 1;
    private global::Etg.Auth.LoginType loginType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etg.Auth.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hashed_passwd" field.</summary>
    public const int HashedPasswdFieldNumber = 3;
    private string hashedPasswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HashedPasswd {
      get { return hashedPasswd_; }
      set {
        hashedPasswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "company_id" field.</summary>
    public const int CompanyIdFieldNumber = 4;
    private string companyId_ = "";
    /// <summary>
    ///  trade_co or social_credit_code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompanyId {
      get { return companyId_; }
      set {
        companyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "captcha_id" field.</summary>
    public const int CaptchaIdFieldNumber = 5;
    private string captchaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CaptchaId {
      get { return captchaId_; }
      set {
        captchaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 6;
    private string token_ = "";
    /// <summary>
    ///  token sent to contact's mobile
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access_token" field.</summary>
    public const int AccessTokenFieldNumber = 7;
    private string accessToken_ = "";
    /// <summary>
    ///  login and renew access_token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoginType != other.LoginType) return false;
      if (Email != other.Email) return false;
      if (HashedPasswd != other.HashedPasswd) return false;
      if (CompanyId != other.CompanyId) return false;
      if (CaptchaId != other.CaptchaId) return false;
      if (Token != other.Token) return false;
      if (AccessToken != other.AccessToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (HashedPasswd.Length != 0) hash ^= HashedPasswd.GetHashCode();
      if (CompanyId.Length != 0) hash ^= CompanyId.GetHashCode();
      if (CaptchaId.Length != 0) hash ^= CaptchaId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LoginType);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (HashedPasswd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HashedPasswd);
      }
      if (CompanyId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CompanyId);
      }
      if (CaptchaId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CaptchaId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Token);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AccessToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (HashedPasswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HashedPasswd);
      }
      if (CompanyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompanyId);
      }
      if (CaptchaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CaptchaId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.HashedPasswd.Length != 0) {
        HashedPasswd = other.HashedPasswd;
      }
      if (other.CompanyId.Length != 0) {
        CompanyId = other.CompanyId;
      }
      if (other.CaptchaId.Length != 0) {
        CaptchaId = other.CaptchaId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            loginType_ = (global::Etg.Auth.LoginType) input.ReadEnum();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            HashedPasswd = input.ReadString();
            break;
          }
          case 34: {
            CompanyId = input.ReadString();
            break;
          }
          case 42: {
            CaptchaId = input.ReadString();
            break;
          }
          case 50: {
            Token = input.ReadString();
            break;
          }
          case 58: {
            AccessToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      isSuccessful_ = other.isSuccessful_;
      message_ = other.message_;
      accessToken_ = other.accessToken_;
      TimestampExpireAt = other.timestampExpireAt_ != null ? other.TimestampExpireAt.Clone() : null;
      User = other.user_ != null ? other.User.Clone() : null;
      Company = other.company_ != null ? other.Company.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "is_successful" field.</summary>
    public const int IsSuccessfulFieldNumber = 1;
    private bool isSuccessful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccessful {
      get { return isSuccessful_; }
      set {
        isSuccessful_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access_token" field.</summary>
    public const int AccessTokenFieldNumber = 3;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp_expire_at" field.</summary>
    public const int TimestampExpireAtFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestampExpireAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimestampExpireAt {
      get { return timestampExpireAt_; }
      set {
        timestampExpireAt_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 5;
    private global::Etg.Profile.UserProfile user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etg.Profile.UserProfile User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "company" field.</summary>
    public const int CompanyFieldNumber = 6;
    private global::Etg.Profile.CompanyProfile company_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etg.Profile.CompanyProfile Company {
      get { return company_; }
      set {
        company_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSuccessful != other.IsSuccessful) return false;
      if (Message != other.Message) return false;
      if (AccessToken != other.AccessToken) return false;
      if (!object.Equals(TimestampExpireAt, other.TimestampExpireAt)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Company, other.Company)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSuccessful != false) hash ^= IsSuccessful.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (timestampExpireAt_ != null) hash ^= TimestampExpireAt.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (company_ != null) hash ^= Company.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSuccessful != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSuccessful);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccessToken);
      }
      if (timestampExpireAt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TimestampExpireAt);
      }
      if (user_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(User);
      }
      if (company_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Company);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSuccessful != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (timestampExpireAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimestampExpireAt);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (company_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Company);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsSuccessful != false) {
        IsSuccessful = other.IsSuccessful;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.timestampExpireAt_ != null) {
        if (timestampExpireAt_ == null) {
          timestampExpireAt_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        TimestampExpireAt.MergeFrom(other.TimestampExpireAt);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Etg.Profile.UserProfile();
        }
        User.MergeFrom(other.User);
      }
      if (other.company_ != null) {
        if (company_ == null) {
          company_ = new global::Etg.Profile.CompanyProfile();
        }
        Company.MergeFrom(other.Company);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSuccessful = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            AccessToken = input.ReadString();
            break;
          }
          case 34: {
            if (timestampExpireAt_ == null) {
              timestampExpireAt_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestampExpireAt_);
            break;
          }
          case 42: {
            if (user_ == null) {
              user_ = new global::Etg.Profile.UserProfile();
            }
            input.ReadMessage(user_);
            break;
          }
          case 50: {
            if (company_ == null) {
              company_ = new global::Etg.Profile.CompanyProfile();
            }
            input.ReadMessage(company_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogoutRequest : pb::IMessage<LogoutRequest> {
    private static readonly pb::MessageParser<LogoutRequest> _parser = new pb::MessageParser<LogoutRequest>(() => new LogoutRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRequest(LogoutRequest other) : this() {
      accessToken_ = other.accessToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRequest Clone() {
      return new LogoutRequest(this);
    }

    /// <summary>Field number for the "access_token" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogoutResponse : pb::IMessage<LogoutResponse> {
    private static readonly pb::MessageParser<LogoutResponse> _parser = new pb::MessageParser<LogoutResponse>(() => new LogoutResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutResponse(LogoutResponse other) : this() {
      isSuccessful_ = other.isSuccessful_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutResponse Clone() {
      return new LogoutResponse(this);
    }

    /// <summary>Field number for the "is_successful" field.</summary>
    public const int IsSuccessfulFieldNumber = 1;
    private bool isSuccessful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccessful {
      get { return isSuccessful_; }
      set {
        isSuccessful_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSuccessful != other.IsSuccessful) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSuccessful != false) hash ^= IsSuccessful.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSuccessful != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSuccessful);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSuccessful != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsSuccessful != false) {
        IsSuccessful = other.IsSuccessful;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSuccessful = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterWithCompanyIdRequest : pb::IMessage<RegisterWithCompanyIdRequest> {
    private static readonly pb::MessageParser<RegisterWithCompanyIdRequest> _parser = new pb::MessageParser<RegisterWithCompanyIdRequest>(() => new RegisterWithCompanyIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterWithCompanyIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterWithCompanyIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterWithCompanyIdRequest(RegisterWithCompanyIdRequest other) : this() {
      companyId_ = other.companyId_;
      captchaId_ = other.captchaId_;
      token_ = other.token_;
      hashedPasswd_ = other.hashedPasswd_;
      email_ = other.email_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterWithCompanyIdRequest Clone() {
      return new RegisterWithCompanyIdRequest(this);
    }

    /// <summary>Field number for the "company_id" field.</summary>
    public const int CompanyIdFieldNumber = 1;
    private string companyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompanyId {
      get { return companyId_; }
      set {
        companyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "captcha_id" field.</summary>
    public const int CaptchaIdFieldNumber = 2;
    private string captchaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CaptchaId {
      get { return captchaId_; }
      set {
        captchaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hashed_passwd" field.</summary>
    public const int HashedPasswdFieldNumber = 4;
    private string hashedPasswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HashedPasswd {
      get { return hashedPasswd_; }
      set {
        hashedPasswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 5;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterWithCompanyIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterWithCompanyIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompanyId != other.CompanyId) return false;
      if (CaptchaId != other.CaptchaId) return false;
      if (Token != other.Token) return false;
      if (HashedPasswd != other.HashedPasswd) return false;
      if (Email != other.Email) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompanyId.Length != 0) hash ^= CompanyId.GetHashCode();
      if (CaptchaId.Length != 0) hash ^= CaptchaId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (HashedPasswd.Length != 0) hash ^= HashedPasswd.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompanyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CompanyId);
      }
      if (CaptchaId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CaptchaId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (HashedPasswd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HashedPasswd);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Email);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompanyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompanyId);
      }
      if (CaptchaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CaptchaId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (HashedPasswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HashedPasswd);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterWithCompanyIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.CompanyId.Length != 0) {
        CompanyId = other.CompanyId;
      }
      if (other.CaptchaId.Length != 0) {
        CaptchaId = other.CaptchaId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.HashedPasswd.Length != 0) {
        HashedPasswd = other.HashedPasswd;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CompanyId = input.ReadString();
            break;
          }
          case 18: {
            CaptchaId = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            HashedPasswd = input.ReadString();
            break;
          }
          case 42: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterWithCompanyIdResponse : pb::IMessage<RegisterWithCompanyIdResponse> {
    private static readonly pb::MessageParser<RegisterWithCompanyIdResponse> _parser = new pb::MessageParser<RegisterWithCompanyIdResponse>(() => new RegisterWithCompanyIdResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterWithCompanyIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterWithCompanyIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterWithCompanyIdResponse(RegisterWithCompanyIdResponse other) : this() {
      isSuccessful_ = other.isSuccessful_;
      message_ = other.message_;
      accessToken_ = other.accessToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterWithCompanyIdResponse Clone() {
      return new RegisterWithCompanyIdResponse(this);
    }

    /// <summary>Field number for the "is_successful" field.</summary>
    public const int IsSuccessfulFieldNumber = 1;
    private bool isSuccessful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccessful {
      get { return isSuccessful_; }
      set {
        isSuccessful_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access_token" field.</summary>
    public const int AccessTokenFieldNumber = 3;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterWithCompanyIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterWithCompanyIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSuccessful != other.IsSuccessful) return false;
      if (Message != other.Message) return false;
      if (AccessToken != other.AccessToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSuccessful != false) hash ^= IsSuccessful.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSuccessful != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSuccessful);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccessToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSuccessful != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterWithCompanyIdResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsSuccessful != false) {
        IsSuccessful = other.IsSuccessful;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSuccessful = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            AccessToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetPasswordWithCompanyIdRequest : pb::IMessage<ResetPasswordWithCompanyIdRequest> {
    private static readonly pb::MessageParser<ResetPasswordWithCompanyIdRequest> _parser = new pb::MessageParser<ResetPasswordWithCompanyIdRequest>(() => new ResetPasswordWithCompanyIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetPasswordWithCompanyIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetPasswordWithCompanyIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetPasswordWithCompanyIdRequest(ResetPasswordWithCompanyIdRequest other) : this() {
      companyId_ = other.companyId_;
      captchaId_ = other.captchaId_;
      token_ = other.token_;
      hashedPasswd_ = other.hashedPasswd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetPasswordWithCompanyIdRequest Clone() {
      return new ResetPasswordWithCompanyIdRequest(this);
    }

    /// <summary>Field number for the "company_id" field.</summary>
    public const int CompanyIdFieldNumber = 1;
    private string companyId_ = "";
    /// <summary>
    ///  trade_co or social_credit_code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompanyId {
      get { return companyId_; }
      set {
        companyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "captcha_id" field.</summary>
    public const int CaptchaIdFieldNumber = 2;
    private string captchaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CaptchaId {
      get { return captchaId_; }
      set {
        captchaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hashed_passwd" field.</summary>
    public const int HashedPasswdFieldNumber = 4;
    private string hashedPasswd_ = "";
    /// <summary>
    ///  new password
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HashedPasswd {
      get { return hashedPasswd_; }
      set {
        hashedPasswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetPasswordWithCompanyIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetPasswordWithCompanyIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompanyId != other.CompanyId) return false;
      if (CaptchaId != other.CaptchaId) return false;
      if (Token != other.Token) return false;
      if (HashedPasswd != other.HashedPasswd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompanyId.Length != 0) hash ^= CompanyId.GetHashCode();
      if (CaptchaId.Length != 0) hash ^= CaptchaId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (HashedPasswd.Length != 0) hash ^= HashedPasswd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompanyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CompanyId);
      }
      if (CaptchaId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CaptchaId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (HashedPasswd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HashedPasswd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompanyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompanyId);
      }
      if (CaptchaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CaptchaId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (HashedPasswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HashedPasswd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetPasswordWithCompanyIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.CompanyId.Length != 0) {
        CompanyId = other.CompanyId;
      }
      if (other.CaptchaId.Length != 0) {
        CaptchaId = other.CaptchaId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.HashedPasswd.Length != 0) {
        HashedPasswd = other.HashedPasswd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CompanyId = input.ReadString();
            break;
          }
          case 18: {
            CaptchaId = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            HashedPasswd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetPasswordWithCompanyIdResponse : pb::IMessage<ResetPasswordWithCompanyIdResponse> {
    private static readonly pb::MessageParser<ResetPasswordWithCompanyIdResponse> _parser = new pb::MessageParser<ResetPasswordWithCompanyIdResponse>(() => new ResetPasswordWithCompanyIdResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetPasswordWithCompanyIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etg.Auth.AuthReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetPasswordWithCompanyIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetPasswordWithCompanyIdResponse(ResetPasswordWithCompanyIdResponse other) : this() {
      isSuccessful_ = other.isSuccessful_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetPasswordWithCompanyIdResponse Clone() {
      return new ResetPasswordWithCompanyIdResponse(this);
    }

    /// <summary>Field number for the "is_successful" field.</summary>
    public const int IsSuccessfulFieldNumber = 1;
    private bool isSuccessful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccessful {
      get { return isSuccessful_; }
      set {
        isSuccessful_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetPasswordWithCompanyIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetPasswordWithCompanyIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSuccessful != other.IsSuccessful) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSuccessful != false) hash ^= IsSuccessful.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSuccessful != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSuccessful);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSuccessful != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetPasswordWithCompanyIdResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsSuccessful != false) {
        IsSuccessful = other.IsSuccessful;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSuccessful = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
